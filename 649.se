shared:
    BETTING_BLOCK = 1
    ENROLLED = 2
    POOL = 3
    WINNINGNUM = 4
    START_POINT = 12
    BET = 1000000000
    PERIOD = 1
    SELECTION = 20
    FEE = 50
    REWARD6 = 685
    REWARD5B = 50
    REWARD5 = 40
    REWARD4 = 75
    REWARDG = 100

init:
    
    contract.storage[BETTING_BLOCK] = block.number
    contract.storage[ENROLLED] = 0
    contract.storage[POOL] = 0

code:
    
    sender = msg.sender
    enrolled = contract.storage[ENROLLED]
    pool = contract.storage[POOL]
    if block.number <= contract.storage[BETTING_BLOCK]:
        contract.storage[POOL] = pool + msg.value
        if msg.value < BET:
            return(0)
        else:
            pos = START_POINT + enrolled * 7
            contract.storage[pos] = sender
            contract.storage[ENROLLED] = enrolled + 1
            pos += 1
            
            # pick 6 numbers
            num = 6
            if msg.data[0] < 6:
                num = msg.data[0]
            
            numbers = array(6)
            used = array(SELECTION)
            count = 0
            i = 0
            while i < num:
                n = msg.data[i + 1]
                if (n >=0 and n<= 49) and used[n] == 0:
                    used[n] = 1
                    numbers[count] = n
                    contract.storage[pos] = n
                    count += 1
                    pos += 1

                i += 1
            h = sha3(block.prevhash + msg.sender + enrolled)
            while count < 6:
                n = h % SELECTION
                if (n >=0 and n<= 49) and used[n] == 0:
                    used[n] = 1
                    numbers[count] = n
                    contract.storage[pos] = n
                    count += 1
                    pos += 1
                h = sha3(h + count)

            numbers[count] = enrolled            
            return(numbers, 7)
    else:
        selected = array(8)
        if enrolled > 0 :
            match6   = 0
            winner6  = array(10)
            match5b  = 0
            winner5b = array(100)
            match5   = 0
            winner5  = array(10000)
            match4   = 0
            winner4  = array(100000)
            match3   = 0
            match2b  = 0
            match2   = 0
            
            h = sha3(block.prevhash + enrolled) 
            numbers = array(SELECTION)

            n = (h % SELECTION + SELECTION) % SELECTION
            numbers[n] = 2
            selected[6] = n
            contract.storage[WINNINGNUM + 6] = n
           
            i = 0
            while i < 6:
                h = sha3(h + i)
                n = (h % SELECTION + SELECTION) % SELECTION
                if numbers[n] == 0:
                    numbers[n] = 1
                    selected[i] = n
                    contract.storage[WINNINGNUM + i] = n
                    i += 1

            h = sha3(h + i)
            n = (h % enrolled + enrolled) % enrolled
            posG = START_POINT + 7*n
            winnerG = contract.storage[posG]
            selected[7] = h % enrolled
            contract.storage[WINNINGNUM + 7] = winnerG

            i = 0
            while i < enrolled:
                bonus = 0
                match = 0
                j = 1
                pos = START_POINT + i * 7
                while j <= 6:
                    n = contract.storage[pos + j]
                    if numbers[n] == 2:
                        bonus = 1
                    if numbers[n] == 1:
                        match += 1
                    
                    j +=1
                    
                addr = contract.storage[pos]
                if match == 6:
                    winner6[match6] = addr
                    match6 += 1
                if match == 5 and bonus == 1:
                    winner5b[match5b] = addr
                    match5b += 1
                if match == 5 and bonus == 0:
                    winner5[match5] = addr
                    match5 += 1
                if match == 4:
                    winner4[match4] = addr
                    match4 += 1                        
                if match == 3:
                    send(addr, 3 * BET)
                    match3 += 1
                if match == 2 and bonus == 1:
                    send(addr, 2 * BET)
                    match2b += 1
                if match == 2 and bonus == 0:
                    send(addr, BET)
                    match2 += 1
                i += 1
                
                
            contract.storage[10000012] = pool  
            pool = pool - 3*BET*match3 - 2*BET*match2b - BET*match2
            rewardg = REWARDG * pool / 1000
            minefee = FEE * pool / 1000
            send(winnerG, rewardg)
            #send(miner, minefee)

            
            if match6 > 0:
                i = 0
                reward = (pool * REWARD6 / 1000) / match6
                while i < match6:
                    send(winner6[i], reward)
                pool -= (pool * REWARD5b / 1000)

            if match5b > 0:              
                i = 0
                reward = (pool * REWARD5b / 1000) / match5b
                while i < match5b:
                    send(winner5b[i], reward)
                pool -= (pool * REWARD5b / 1000)

            if match5 > 0:
                i = 0
                reward = (pool * REWARD5 / 1000) / match5
                while i < match5:
                    send(winner5[i], reward)
                pool -= (pool * REWARD5 / 1000)

            if match4 > 0:                    
                i = 0
                reward = (pool * REWARD4 / 1000) / match4
                while i < match4:
                    send(winner4[i], reward)
                pool -=(pool * REWARD4 / 1000)
                        
        contract.storage[BETTING_BLOCK] = block.number + PERIOD
        contract.storage[ENROLLED] = 0
        contract.storage[POOL] = pool      
        return(selected, 8)       
